function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const uuid = require("uuid");
const path = require("path");
const mount = require("koa-mount");
const parse = require("async-busboy");
const dateformat = require("dateformat");

const imageUpload = opts => {

  let store;
  try {
    store = require(`./${ opts.provider }`)(opts);
  } catch (err) {
    throw new Error(`Error: ${ err }`);
  }

  const { mimetypes } = opts;

  return (() => {
    var _ref = _asyncToGenerator(function* (ctx, next) {
      // Validate Request
      if ("POST" !== ctx.method && !ctx.request.is("multipart/*")) {
        return yield next();
      }

      // Parse request for multipart
      const { files, fields } = yield parse(ctx.req);

      // Check if any file is not valid mimetype
      if (mimetypes) {
        const invalidFiles = files.filter(function (file) {
          return !mimetypes.includes(file.mimeType);
        });

        // Return err if any not valid
        if (invalidFiles.length !== 0) {
          ctx.status = 400;
          ctx.body = `Error: Invalid type of files ${ invalidFiles.map(function (file) {
            return `${ file.filename }[${ file.mimeType }]`;
          }) }`;
          return;
        }
      }
      // Generate oss path
      let result = {};
      const storeDir = opts.storeDir ? `${ opts.storeDir }/` : '';
      files.forEach(function (file) {
        result[file.filename] = `${ storeDir }${ dateformat(new Date(), "yyyy/mm/dd") }/${ uuid.v4() }${ path.extname(file.filename) }`;
      });

      // Upload to OSS or folders
      try {
        yield Promise.all(files.map(function (file) {
          return store.put(result[file.filename], file);
        }));
      } catch (err) {
        ctx.status = 500;
        ctx.body = `Error: ${ err }`;
        return;
      }

      // Return result
      ctx.status = 200;
      // Support < IE 10 browser
      ctx.res.setHeader("Content-Type", "text/html");
      ctx.body = JSON.stringify(store.get(result));
      return;
    });

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();
};

module.exports = options => {
  if (!options.url) {
    throw new Error('Can not find option url');
  }
  return mount(options.url, imageUpload(options));
};